#include "3dmath.h"
#include "particles.h"

ParticleGenerators particle_generators[MAX_PARTICLE_GENERATORS];
int particle_generator_count = 0;

void particles_create_generator(Vector* pos,ParticleEffect effect, uint32_t lifetime)
{
    ParticleGenerator* pg = &particle_generators[particle_generator_count];
    pg->effect = effect;

    memset(pg->particles, 0, sizeof(Particle)*MAX_PARTICLES);
    pg->particle_count = 0;
    py->life = 0;
    pg->life_max = lifetime;

    switch(effect)
    {
        case PARTICLE_EFFECT_EXPLOSION:
            pg->texture = t_particle_explosion;
            pg->speed = 0.5;
            pg->scale = 1.0;
            pg->spawn_time_min = 0.05;
            pg->spawn_time_max = 0.2;
            break;
        default:
            break;
    }
}

void particles_update()
{

    for(int i = 0; i < particle_generator_count; ++i)
    {
        ParticleGenerator* pg = &particle_generators[i];

        // determine if need to spawn new particle
        float spawn_time_range = pg->spawn_time_max - pg->spawn_time_min; // seconds
        int r = rand() % (spawn_time_range*1000);


        // update particles
        for(int j = 0; j < pg->particle_count; ++j)
        {

        }
    }

}

void particles_draw()
{

    for(int i = 0; i < particle_generator_count; ++i)
    {
        ParticleGenerator* pg = &particle_generators[i];

        for(int j = 0; j < pg->particle_count; ++j)
        {

        }
    }
}
